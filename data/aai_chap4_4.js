// data/aai_chap4_4.js
export default {
  name: "aai_chap4-4：杂项数据传送指令",
  data: [
    {front:"<mark>XCHG</mark> (Exchange) 指令的核心与应用 🔄",back:`<dl><dt>核心功能</dt><dd>原子性地交换 <mark>寄存器 $\\leftrightarrow$ 寄存器</mark> 或 <mark>寄存器 $\\leftrightarrow$ 内存</mark> 的内容。</dd><dt>限制</dt><dd>不能直接交换 <mark>内存 $\\leftrightarrow$ 内存</mark>，不能交换 <mark>立即数 $\\leftrightarrow$ 操作数</mark>。</dd><dt>特例 (AX)</dt><dd>XCHG AX, reg 是早期的 <mark>最短机器码</mark> 之一 (如 $\\text{XCHG AX, AX}$ 机器码实际上是 $\\text{NOP}$)。</dd><dt>核心用途</dt><dd>实现 <mark>自旋锁 (Spinlock)</mark> 等同步机制。通过 <mark>LOCK XCHG</mark> 实现不可中断的 <mark>原子性</mark> “测试并设置”操作。</dd></dl>`},
    {front:"<mark>LAHF/SAHF</mark> 标志位操作 (遗留指令) 🚩",back:`<dl><dt>LAHF</dt><dd>功能：将 <mark>EFLAGS</mark> 寄存器的 <mark>低 8 位</mark> 复制到 <mark>AH</mark> 寄存器。</dd><dt>SAHF</dt><dd>功能：将 <mark>AH</mark> 寄存器的内容复制到 <mark>EFLAGS</mark> 的 <mark>低 8 位</mark> (逆操作)。</dd><dt>用途</dt><dd>快速备份/恢复 <mark>常用标志位</mark> (如 $\\text{SF, ZF, CF}$)，而无需 $\\text{PUSH/POP}$ 整个 $\\text{EFLAGS}$。</dd><dt>现代应用</dt><dd>在 <mark>64 位模式</mark> 中被视为 <mark>遗留指令</mark>，但在底层虚拟化场景仍有应用。</dd></dl>`},
    {front:"<mark>XLAT</mark> (Translate) 查表指令 📚",back:`<dl><dt>核心功能</dt><dd>$\\text{AL} = [\\text{DS:BX} + \\text{AL}]$</dd><dt>操作数</dt><dd><mark>隐式</mark>：<br>1. <mark>BX</mark> (或 $\\text{EBX}$): 存放 <mark>查找表 (Table)</mark> 的 <mark>基地址</mark>。<br>2. <mark>AL</mark>: 存放进入表的 <mark>索引</mark> 或 <mark>偏移</tex>，结果也存回 $\\text{AL}$ (8位操作)。</dd><dt>特殊寻址</dt><dd>寻址方式 $\\text{[BX+AL]}$ 为 $\\text{XLAT}$ <mark>独有</mark>。</dd><dt>用途</dt><dd>主要用于 <mark>数据格式转换</mark> (如 $\\text{ASCII} \\to \\text{EBCDIC}$ 码，或将数字 $\\to$ $\\text{7}$ 段数码管编码)。</dd></dl>`},
    {front:"<mark>IN</mark> 和 <mark>OUT</mark> I/O 基本指令 🚪",back:`<dl><dt>功能</dt><dd>专门用于 <mark>I/O 地址空间</mark> 的数据传送。</dd><dt>数据通路</dt><dd>数据传送只发生在 <mark>累加器</mark> ($\text{AL/AX/EAX}$) $\\leftrightarrow$ <mark>I/O 设备</mark> 之间。</dd><dt>端口寻址</dt><dd>1. <mark>固定端口寻址</mark>：端口地址 (<mark>00h $\\sim$ FFh</mark>) <mark>直接</mark> 写在指令中 (用于常用设备)。<br>2. <mark>可变端口寻址</mark>：端口地址 (<mark>0000h $\\sim$ FFFFh</mark>) 存放在 <mark>DX</mark> 寄存器中 (用于动态/连续端口)。</dd><dt>输出大小决定</dt><dd>输出端口的大小由 <mark>源累加器</mark> 决定 (e.g., $\\text{OUT port, AL} \\to 8$ 位端口)。</dd></dl>`},
    {front:"<mark>MOVSX</mark> 和 <mark>MOVZX</mark> 扩展指令 ➕",back:`<dl><dt>MOVZX (Zero Extend)</dt><dd>功能：将较小操作数复制到较大目标寄存器，<mark>高位全部用 0 填充</mark>。<br>用途：处理 <mark>无符号数</mark>，保持数值不变 (e.g., $\\text{8FH} \\to \\text{008FH}$)。</dd><dt>MOVSX (Sign Extend)</dt><dd>功能：将较小操作数复制到较大目标寄存器，<mark>高位用源操作数的符号位填充</mark> (最高位)。<br>用途：处理 <mark>有符号数</mark> (补码)，保持数值和正负不变 (e.g., $\\text{8FH (-113)} \\to \\text{FF8FH (-113)}$)。</dd><dt>兼容性</dt><dd>始于 $\\text{80386}$ 处理器。</dd></dl>`},
    {front:"<mark>BSWAP</mark> (Byte Swap) 字节序转换 🔄",back:`<dl><dt>功能</dt><dd>颠倒 <mark>32 位或 64 位</mark> 寄存器中的 <mark>字节顺序</mark> ($\text{Endianness}$ 转换)。</dd><dt>兼容性</dt><dd>始于 $\\text{80486}$ 处理器；<mark>不支持 16 位</mark> 寄存器 (16 位交换需用 $\\text{XCHG AL, AH}$)。</dd><dt>用途</dt><dd>处理 <mark>网络数据</mark> (大端序) 或在不同字节序机器上创建的文件 (如将 $\\text{12345678H} \\to \\text{78563412H}$)。</dd><dt>优势</dt><dd><mark>一条指令</mark> 完成复杂的手动交换 (如 $\\text{XCHG}$ 和 $\\text{ROR}$ 的组合操作)。</dd></dl>`},
    {front:"<mark>CMOV</mark> (Conditional Move) 的核心与优势 🚀",back:`<dl><dt>功能</dt><dd>一条“<mark>有条件的 MOV</mark>”：先检查 $\\text{EFLAGS}$ 标志位，满足条件才执行传送，否则 $\\text{NOP}$。</dd><dt>指令形式</dt><dd>$\\text{CMOVcc Destination, Source}$ (cc 为条件码，如 $\\text{CMOVZ}$)。</dd><dt>核心优势</dt><dd><mark>避免分支 (Branch)</mark>：消除 <mark>分支预测失败</mark> 带来的流水线清空和巨大性能损失，尤其对 <mark>随机条件</mark> 效果显著。</dd><dt>高级优化</dt><dd>将 <mark>控制依赖</mark> 转换为 <mark>数据依赖</mark>，扩大 <mark>指令调度空间</mark> (Instruction Scheduling Space)，利于编译器优化。</dd></dl>`}
  ]
};