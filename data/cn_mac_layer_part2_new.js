// data/cn_mac_layer_part2_new.js
export default {
  name: "计算机网络：MAC层（下）",
  data: [
    // --- Ethernet Section ---
    {front:"集线器(Hub) vs 交换机(Switch) ⚔️", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>集线器 (Hub)</dt><dd>• <b>工作层次</b>: 物理层设备。<br>• <b>工作方式</b>: 简单广播，将收到的信号复制并发送到所有其他端口。<br>• <b>冲突域</b>: 所有端口共享<mark>同一个冲突域</mark>，依然需要CSMA/CD。<br>• <b>带宽</b>: 共享带宽。</dd><dt style='font-weight: bold; color: #005A9C;'>交换机 (Switch)</dt><dd>• <b>工作层次</b>: 数据链路层设备。<br>• <b>工作方式</b>: 基于<mark>MAC地址表</mark>进行智能转发。<br>• <b>冲突域</b>: 每个端口是<mark>一个独立的冲突域</mark>，极大减少冲突。<br>• <b>带宽</b>: 独享带宽。</dd></dl></div>"},
    {front:"曼彻斯特编码的原理与优缺点 📉📈", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>编码规则</dt><dd>下降沿 (高->低) 表示 <mark>0</mark>，上升沿 (低->高) 表示 <mark>1</mark>。每个比特中间都有一次电平跳变。</dd><dt style='font-weight: bold; color: #005A9C;'>优点</dt><dd>1. <mark>自带时钟</mark>：跳变可用于同步，解决长连0/1问题。<br>2. <mark>直流分量为零</mark>：高低电平各占一半，利于传输。</dd><dt style='font-weight: bold; color: #005A9C;'>缺点</dt><dd>编码效率低，<mark>波特率是比特率的两倍</mark>，浪费带宽。</dd></dl></div>"},
    {front:"以太网帧结构的关键字段有哪些？ 📦", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>前同步码 & 定界符 (8B)</dt><dd>用于时钟同步和标识帧开始。</dd><dt style='font-weight: bold; color: #005A9C;'>目的/源MAC地址 (各6B)</dt><dd>48位的全球唯一硬件地址。</dd><dt style='font-weight: bold; color: #005A9C;'>类型/长度 (2B)</dt><dd>值 > <mark>1536</mark> 表示类型 (上层协议)，否则表示数据字段长度。</dd><dt style='font-weight: bold; color: #005A9C;'>数据 (46-1500B)</dt><dd>承载上层数据包，<mark>MTU为1500字节</mark>。不足46字节需填充。</dd><dt style='font-weight: bold; color: #005A9C;'>帧校验序列 (FCS, 4B)</dt><dd>使用 <mark>CRC</mark> 算法检测传输错误。</dd></dl></div>"},
    {front:"为什么以太网最小帧长是 <mark>64字节</mark>？ 🤔", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>核心原则</dt><dd>为了让 <mark>CSMA/CD</mark> 协议正常工作，必须保证：<br><b>帧的发送时间 ≥ 信号的往返传播时间 (RTT 或 <mark>2τ</mark>)</b></dd><dt style='font-weight: bold; color: #005A9C;'>推导</dt><dd>在10Mbps经典以太网中，最大RTT (2τ) 约为 <mark>51.2μs</mark>。<br>要发送51.2μs，需要的数据量为：<br><mark>10Mbps * 51.2μs = 512 bits = 64 bytes</mark>。<br>所以最短帧长定为64字节，以确保任何冲突都能被检测到。</dd></dl></div>"},
    {front:"什么是 <mark>二进制指数退避</mark> 算法？ 🎲", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>目的</dt><dd>在CSMA/CD检测到冲突后，决定<mark>等待多久再重试</mark>的核心算法。</dd><dt style='font-weight: bold; color: #005A9C;'>算法步骤</dt><dd>1. <b>确定基本时间单位</b>：争用期 <mark>2τ</mark> (51.2μs)。<br>2. <b>确定重传次数</b>: 设这是第 <mark>i</mark> 次连续冲突。<br>3. <b>选择随机数 k</b>: 从 [0, 1, ..., <mark>2<sup>i</sup>-1</mark>] 范围中随机选一个整数 k (当 i > 10 时，范围固定为 [0, 1023])。<br>4. <b>计算等待时间</b>: 等待 <mark>k * 2τ</mark> 的时间。<br>5. <b>返回侦听</b>: 等待结束后，返回CSMA/CD的第一步，侦听信道。</dd><dt style='font-weight: bold; color: #005A9C;'>核心思想</dt><dd>网络越拥堵(冲突次数i越多)，退避时间的<mark>选择范围就越大</mark>，从而降低再次冲突的概率。</dd></dl></div>"},
    {front:"高速以太网为何<mark>抛弃</mark>CSMA/CD？ 🚀", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>根本原因</dt><dd>速率提高后，发送一个最小帧的时间 P 急剧缩短，导致 <mark>P < 2τ</mark>。这意味着，在帧发送完成前，冲突信号还未传回，CSMA/CD协议失效。</dd><dt style='font-weight: bold; color: #005A9C;'>解决方案</dt><dd>1. <b>全面转向交换机</b>：在<mark>全双工</mark>模式下，收发信道分离，物理上不可能发生冲突，彻底抛弃CSMA/CD。<br>2. <b>半双工补救措施 (已淘汰)</b>: <br> • <i>载波扩展</i>: 将短帧填充到512字节再发送。<br> • <i>帧突发</i>: 允许一个站点连续发送多个帧。</dd><dt style='font-weight: bold; color: #005A9C;'>结论</dt><dd>现代以太网 (万兆及以上) <mark>只支持全双工模式</mark>，CSMA/CD已成为历史。</dd></dl></div>"},
    
    // --- WiFi (802.11) Section ---
    {front:"WiFi的两种工作模式是什么？ 🏠 vs 🤝", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>基础设施模式 (Infrastructure Mode)</dt><dd>• <b>结构</b>: 所有设备(Client)都通过一个中心节点 <mark>AP (Access Point)</mark> 来通信。<br>• <b>特点</b>: AP连接到有线网络，设备间通信也需AP中转 (A -> AP -> B)。这是最常用的模式。</dd><dt style='font-weight: bold; color: #005A9C;'>自组织网络模式 (Ad hoc Mode)</dt><dd>• <b>结构</b>: <mark>没有中心AP</mark>，所有设备对等，可以直接相互通信。<br>• <b>应用</b>: 临时文件共享、联机游戏等场景。</dd></dl></div>"},
    {front:"CSMA/CA 如何 <mark>避免</mark> 冲突？ ✋", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>核心区别</dt><dd>WiFi无法实现冲突<mark>检测</mark> (边发边听)，所以重点在于冲突<mark>避免</mark> (Collision Avoidance)。</dd><dt style='font-weight: bold; color: #005A9C;'>关键机制</dt><dd>1. <mark>提前退避</mark>：即使信道空闲，也需等待一个 <mark>DIFS</mark> + 随机退避时间再发送。<br>2. <mark>ACK确认</mark>：接收方成功收到数据后，必须在 <mark>SIFS</mark> (最短)间隔后回复一个 <mark>ACK</mark> 帧。<br>3. <mark>RTS/CTS (可选)</mark>：通过虚拟感知机制解决隐藏终端问题。</dd></dl></div>"},
    {front:"什么是 <mark>虚拟感知</mark> (RTS/CTS)？它如何解决隐藏终端问题？ 📡🤫📡", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>隐藏终端问题</dt><dd>A和C都听不到对方，但都能听到B。若A和C同时发给B，就会在B处冲突。</dd><dt style='font-weight: bold; color: #005A9C;'>RTS/CTS 握手</dt><dd>1. A向B发送 <mark>RTS</mark> (请求发送)，包含通信时长。<br>2. B向所有能听到它的设备回复 <mark>CTS</mark> (清除发送)，也包含该时长。<br>3. C虽听不到RTS，但能听到CTS。C解析出时长后，设置一个 <mark>NAV (网络分配向量)</mark> 计时器，在此期间保持静默，从而避免冲突。</dd></dl></div>"},
    {front:"802.11帧为何需要<mark>四个地址</mark>？ 📬", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>背景</dt><dd>因为WiFi通信经常需要经过AP中转，并与有线网络交互，所以需要同时标识<mark>直接收发方</mark>和<mark>原始收发方</mark>。</dd><dt style='font-weight: bold; color: #005A9C;'>地址字段含义</dt><dd>• <b>地址1</b>: 直接接收方 (Immediate Receiver)，如AP。<br>• <b>地址2</b>: 直接发送方 (Immediate Sender)，如发送主机。<br>• <b>地址3</b>: 原始源或最终目的地址，用于与有线网络交互。<br>• <b>地址4</b>: 在无线网桥模式下使用，非常罕见。</dd><dt style='font-weight: bold; color: #005A9C;'>To/From DS 字段</dt><dd>帧控制字段中的这两个比特位决定了四个地址字段的具体解释方式 (例如，01表示设备发往AP)。</dd></dl></div>"},
    {front:"WiFi如何实现QoS (服务质量)？ 🚦", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>核心机制</dt><dd>通过定义不同长度的<mark>帧间间隔 (Interframe Spacing, IFS)</mark>来实现优先级。<br><b>等待时间越短，优先级越高。</b></dd><dt style='font-weight: bold; color: #005A9C;'>IFS 优先级 hierarchy</dt><dd>• <mark>SIFS (短帧间间隔)</mark>: <b>最高优先级</b>。用于ACK, CTS等必须立即响应的控制帧。<br>• <mark>DIFS (DCF帧间间隔)</mark>: <b>普通优先级</b>。普通数据帧发送前必须等待的时间。<br>• <mark>AIFS (仲裁帧间间隔)</mark>: <b>高优先级业务</b>。用于QoS，如语音(VoIP)可以使用比DIFS更短的AIFS来抢占信道。</dd></dl></div>"},

    // --- Switching Section ---
    {front:"交换机如何实现 <mark>智能转发</mark>？ 🧠", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>两大核心机制</dt><dd>通过自学习构建和维护一张 <mark>MAC地址表</mark> (转发表)。</dd><dt style='font-weight: bold; color: #005A9C;'>1. 反向学习 (Backward Learning)</dt><dd>检查收到的每个帧的 <mark>源MAC地址</mark>，记录 `{MAC_Source, Port_In}` 映射关系。</dd><dt style='font-weight: bold; color: #005A9C;'>2. 转发决策</dt><dd>• <b>已知目的地址</b>: 从表中查到对应端口，精确<mark>转发</mark> (若目的端口=源端口则<mark>丢弃</mark>)。<br>• <b>未知目的地址</b>: 执行<mark>洪泛 (Flooding)</mark>，即向除源端口外的所有端口复制并发送。</dd></dl></div>"},
    {front:"交换机如何处理网络动态变化？ ⏳", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>问题</dt><dd>网络拓扑是动态的 (设备移动、关机)，MAC地址表中的记录可能会过时。</dd><dt style='font-weight: bold; color: #005A9C;'>解决方案：老化机制 (Aging)</dt><dd>1. <b>设置时间戳</b>：在创建或更新每一条MAC地址表项时，都记录一个时间戳。<br>2. <b>定期扫描</b>：交换机内部进程会定期扫描MAC地址表。<br>3. <b>删除陈旧条目</b>：删除那些在一定时间（例如几分钟）内没有被更新过的“陈旧”条目。</dd><dt style='font-weight: bold; color: #005A9C;'>效果</dt><dd>确保MAC地址表的准确性。如果一个设备长时间未通信，其条目被清除，下次有数据发给它时，交换机将通过洪泛重新学习其位置。</dd></dl></div>"},
    {front:"什么是 <mark>生成树协议 (STP)</mark>？它为什么重要？ 🌳", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>目的</dt><dd>在存在物理环路的交换网络中，<mark>防止广播风暴</mark>和MAC地址表不稳定。</dd><dt style='font-weight: bold; color: #005A9C;'>工作原理</dt><dd>1. <b>选举根网桥</b>：选举一个MAC地址最小的交换机作为根。<br>2. <b>确定端口角色</b>：在每个交换机上选举根端口、指定端口和阻塞端口。<br>3. <b>逻辑上破环</b>：通过将某些端口置于 <mark>阻塞 (Blocking)</mark> 状态，禁止其转发数据帧，从而在逻辑上剪断环路，形成一棵无环“树”。</dd><dt style='font-weight: bold; color: #005A9C;'>结论</dt><dd>STP保证了冗余链路的可用性，同时避免了环路带来的灾难性网络故障。</dd></dl></div>"},
    {front:"什么是 <mark>VLAN</mark>？它与 <mark>802.1Q</mark> 有何关系？ 🏷️", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>VLAN (虚拟局域网)</dt><dd>在物理上是同一个LAN，但在逻辑上划分为多个独立的 <mark>广播域</mark>。不同VLAN间默认隔离。</dd><dt style='font-weight: bold; color: #005A9C;'>好处</dt><dd>• <mark>安全性</mark>: 隔离流量。<br>• <mark>灵活性</mark>: 按功能划分，不受物理位置限制。<br>• <mark>性能</mark>: 限制广播范围。</dd><dt style='font-weight: bold; color: #005A9C;'>802.1Q & Trunk</dt><dd>当一个VLAN跨越多台交换机时，需要使用 <mark>Trunk</mark> 链路。为了区分不同VLAN的帧，<mark>IEEE 802.1Q</mark> 协议定义了在以太网帧中插入一个4字节的“<mark>VLAN标签</mark>”，其中最重要的字段是 <mark>VLAN ID (12位)</mark>。</dd></dl></div>"},
    {front:"网络设备分层总结 🏢", back:"<div style='font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333; padding: 15px; border-radius: 8px; line-height: 1.6;'><dl><dt style='font-weight: bold; color: #005A9C;'>物理层 (L1)</dt><dd>• <b>设备</b>: 中继器 (Repeater), 集线器 (Hub)<br>• <b>处理单位</b>: 比特 (Bit)<br>• <b>功能</b>: 信号再生和广播，不识别任何地址。</dd><dt style='font-weight: bold; color: #005A9C;'>数据链路层 (L2)</dt><dd>• <b>设备</b>: 网桥 (Bridge), 交换机 (Switch)<br>• <b>处理单位</b>: 帧 (Frame)<br>• <b>功能</b>: 识别 <mark>MAC地址</mark>，在局域网内部进行转发。</dd><dt style='font-weight: bold; color: #005A9C;'>网络层 (L3)</dt><dd>• <b>设备</b>: 路由器 (Router)<br>• <b>处理单位</b>: 包 (Packet)<br>• <b>功能</b>: 识别 <mark>IP地址</mark>，负责在不同网络之间转发数据包。</dd></dl></div>"}
  ]
};